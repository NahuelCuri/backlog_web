{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/Documents/proyectos/Games to Play web/backlog/src/Components/RowList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Row from './Row';\nimport RowFilter from './RowFilter';\nimport EditGameModal from './EditGameModal';\nimport './RowList.css';\nimport ViewGameModal from './ViewGameModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RowList() {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [selectedGame, setSelectedGame] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    axios.get('http://localhost:8080/api/games').then(response => {\n      console.log(response.data); // Verifica los datos aquí\n      setRows(response.data);\n    }).catch(error => {\n      console.error('Error fetching game list:', error);\n    });\n  }, []);\n  const handleRowClick = game => {\n    setSelectedGame(game);\n    setIsModalOpen(true);\n  };\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setSelectedGame(null);\n  };\n  const handleSave = updatedGame => {\n    // Aquí puedes agregar la lógica para guardar los cambios en la BD\n    console.log('Saving game:', updatedGame);\n    // Actualiza el estado local para reflejar los cambios\n    setRows(rows.map(row => row.id === updatedGame.id ? updatedGame : row));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rowList\",\n    children: [/*#__PURE__*/_jsxDEV(RowFilter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), rows.map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      id: row.id,\n      title: row.title || 'Not Available',\n      genre: row.genre || 'Not Available',\n      releaseDate: row.releaseDate || 'Not Available',\n      htlb: row.htlb || 'Not Available',\n      timePlayed: row.timePlayed || 'Not Available',\n      status: row.gameStatus || 'Not Available' // Assuming 'status' should be 'gameStatus'\n      ,\n      score: row.score || 'Not Available',\n      onRowClick: handleRowClick\n    }, row.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)), selectedGame && (console.log(\"modal receives: \", selectedGame), /*#__PURE__*/_jsxDEV(ViewGameModal, {\n      isOpen: isModalOpen,\n      onRequestClose: handleModalClose,\n      gameData: selectedGame\n      // onSave={handleSave}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(RowList, \"bY0NfWeWoBYEXYZ+P/DAX5+3FPc=\");\n_c = RowList;\nexport default RowList;\nvar _c;\n$RefreshReg$(_c, \"RowList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Row","RowFilter","EditGameModal","ViewGameModal","jsxDEV","_jsxDEV","RowList","_s","rows","setRows","selectedGame","setSelectedGame","isModalOpen","setIsModalOpen","get","then","response","console","log","data","catch","error","handleRowClick","game","handleModalClose","handleSave","updatedGame","map","row","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","title","genre","releaseDate","htlb","timePlayed","status","gameStatus","score","onRowClick","isOpen","onRequestClose","gameData","_c","$RefreshReg$"],"sources":["/home/nahuel/Documents/proyectos/Games to Play web/backlog/src/Components/RowList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Row from './Row';\nimport RowFilter from './RowFilter';\nimport EditGameModal from './EditGameModal';\nimport './RowList.css';\nimport ViewGameModal from './ViewGameModal';\n\nfunction RowList() {\n  const [rows, setRows] = useState([]);\n  const [selectedGame, setSelectedGame] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    axios.get('http://localhost:8080/api/games')\n      .then(response => {\n        console.log(response.data);  // Verifica los datos aquí\n        setRows(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching game list:', error);\n      });\n  }, []);\n\n  const handleRowClick = (game) => {\n    setSelectedGame(game);\n    setIsModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setSelectedGame(null);\n  };\n\n  const handleSave = (updatedGame) => {\n    // Aquí puedes agregar la lógica para guardar los cambios en la BD\n    console.log('Saving game:', updatedGame);\n    // Actualiza el estado local para reflejar los cambios\n    setRows(rows.map(row => (row.id === updatedGame.id ? updatedGame : row)));\n  };\n\n  return (\n    <div className=\"rowList\">\n      <RowFilter />\n      {rows.map((row, index) => (\n        <Row \n          key={row.id}\n          id={row.id}\n          title={row.title || 'Not Available'}\n          genre={row.genre || 'Not Available'}\n          releaseDate={row.releaseDate || 'Not Available'}\n          htlb={row.htlb || 'Not Available'}\n          timePlayed={row.timePlayed || 'Not Available'}\n          status={row.gameStatus || 'Not Available'}  // Assuming 'status' should be 'gameStatus'\n          score={row.score || 'Not Available'}\n          onRowClick={handleRowClick}\n        />\n      ))}\n      {selectedGame && (\n        console.log(\"modal receives: \",selectedGame),\n        <ViewGameModal \n          isOpen={isModalOpen}\n          onRequestClose={handleModalClose}\n          gameData={selectedGame}\n         // onSave={handleSave}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default RowList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}