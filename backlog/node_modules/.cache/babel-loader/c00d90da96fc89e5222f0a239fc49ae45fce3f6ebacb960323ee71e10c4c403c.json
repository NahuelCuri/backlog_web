{"ast":null,"code":"var _jsxFileName = \"/home/nahuel/Documents/proyectos/Games to Play web/backlog/src/Components/GameTable.jsx\",\n  _s = $RefreshSig$();\n// src/components/GameTable.jsx\nimport React, { useState, useEffect } from 'react';\nimport GameRow from './GameRow';\nimport styles from './GameTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameTable() {\n  _s();\n  const [games, setGames] = useState([]); // State to store game data\n  const [expandedRow, setExpandedRow] = useState(null); // State for expandable rows\n  const [loading, setLoading] = useState(true); // Optional: Track loading state\n  const [error, setError] = useState(null); // Optional: Track errors\n\n  // Fetch game data from the backend when the component mounts\n  useEffect(() => {\n    const fetchGames = async () => {\n      try {\n        // Replace 'http://your-backend-api.com/api/games' with your actual backend endpoint\n        const response = await fetch('http://localhost:8080/api/games');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setGames(data); // Update state with fetched data\n      } catch (error) {\n        setError(error.message); // Handle errors\n      } finally {\n        setLoading(false); // Stop loading\n      }\n    };\n    fetchGames();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loading,\n      children: \"Loading games...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this); // Optional loading state\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.error,\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this); // Optional error state\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.tableWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.table,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"Game Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"Genre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"Release Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"HLTB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"Time Played\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"Played Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cell,\n          children: \"Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.expandCell\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.body,\n        children: games.map(game => /*#__PURE__*/_jsxDEV(GameRow, {\n          // Use the game's unique id as the key\n          game: game,\n          isExpanded: expandedRow === game.id // Use id for expanded state\n          ,\n          onExpand: () => setExpandedRow(expandedRow === game.id ? null : game.id) // Use id for toggle\n        }, game.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(GameTable, \"c1aqbBdelBd0tM+pqkmyFc4/9KQ=\");\n_c = GameTable;\nexport default GameTable;\nvar _c;\n$RefreshReg$(_c, \"GameTable\");","map":{"version":3,"names":["React","useState","useEffect","GameRow","styles","jsxDEV","_jsxDEV","GameTable","_s","games","setGames","expandedRow","setExpandedRow","loading","setLoading","error","setError","fetchGames","response","fetch","ok","Error","data","json","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","tableWrapper","table","header","cell","expandCell","body","map","game","isExpanded","id","onExpand","_c","$RefreshReg$"],"sources":["/home/nahuel/Documents/proyectos/Games to Play web/backlog/src/Components/GameTable.jsx"],"sourcesContent":["// src/components/GameTable.jsx\nimport React, { useState, useEffect } from 'react';\nimport GameRow from './GameRow';\nimport styles from './GameTable.module.css';\n\nfunction GameTable() {\n  const [games, setGames] = useState([]); // State to store game data\n  const [expandedRow, setExpandedRow] = useState(null); // State for expandable rows\n  const [loading, setLoading] = useState(true); // Optional: Track loading state\n  const [error, setError] = useState(null); // Optional: Track errors\n\n  // Fetch game data from the backend when the component mounts\n  useEffect(() => {\n    const fetchGames = async () => {\n      try {\n        // Replace 'http://your-backend-api.com/api/games' with your actual backend endpoint\n        const response = await fetch('http://localhost:8080/api/games');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setGames(data); // Update state with fetched data\n      } catch (error) {\n        setError(error.message); // Handle errors\n      } finally {\n        setLoading(false); // Stop loading\n      }\n    };\n\n    fetchGames();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  if (loading) {\n    return <div className={styles.loading}>Loading games...</div>; // Optional loading state\n  }\n\n  if (error) {\n    return <div className={styles.error}>Error: {error}</div>; // Optional error state\n  }\n\n  return (\n    <div className={styles.tableWrapper}>\n      <div className={styles.table}>\n        {/* Header Row */}\n        <div className={styles.header}>\n          <div className={styles.cell}>Game Title</div>\n          <div className={styles.cell}>Genre</div>\n          <div className={styles.cell}>Release Date</div>\n          <div className={styles.cell}>HLTB</div>\n          <div className={styles.cell}>Time Played</div>\n          <div className={styles.cell}>Played Status</div>\n          <div className={styles.cell}>Score</div>\n          <div className={styles.expandCell}></div> {/* Empty cell to match the chevron */}\n        </div>\n        {/* Data Rows */}\n        <div className={styles.body}>\n          {games.map((game) => (\n            <GameRow\n              key={game.id} // Use the game's unique id as the key\n              game={game}\n              isExpanded={expandedRow === game.id} // Use id for expanded state\n              onExpand={() => setExpandedRow(expandedRow === game.id ? null : game.id)} // Use id for toggle\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GameTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}